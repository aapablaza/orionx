import _classCallCheck from 'babel-runtime/helpers/classCallCheck';
import _Array$from from 'babel-runtime/core-js/array/from';
import _Object$keys from 'babel-runtime/core-js/object/keys';
import _typeof from 'babel-runtime/helpers/typeof';

/**
 * Checks a node is an enumerable object.
 * @param {*} node - A node to check.
 * @returns {Boolean} Is the node an enumerable object.
 */
var isObject = function isObject(node) {
  return (typeof node === 'undefined' ? 'undefined' : _typeof(node)) === 'object' && node !== null;
};

/**
 * A file extraction.
 * @typedef {Object} ExtractedFile
 * @property {String} path - Original location in the object tree.
 * @property {String} file - The actual file.
 */

/**
 * Reversibly extracts files from an object tree.
 * @param {object} tree - An object tree to extract files from.
 * @param {string} [treePath=''] - Optional tree path to prefix file paths.
 * @returns {ExtractedFile[]} Extracted files.
 */
function extractFiles(tree) {
  var treePath = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : '';

  var files = [];
  var recurse = function recurse(node, nodePath) {
    // Iterate enumerable properties of the node
    _Object$keys(node).forEach(function (key) {
      // Skip non-object
      if (!isObject(node[key])) return;

      var path = '' + nodePath + key;

      if (
      // Node is a File
      typeof File !== 'undefined' && node[key] instanceof File ||
      // Node is a ReactNativeFile
      node[key] instanceof ReactNativeFile) {
        // Extract the file and it's object tree path
        files.push({ path: path, file: node[key] });

        // Delete the file. Array items must be deleted without reindexing to
        // allow repopulation in a reverse operation.
        delete node[key];

        // No further checks or recursion
        return;
      }

      if (typeof FileList !== 'undefined' && node[key] instanceof FileList)
        // Convert read-only FileList to an array for manipulation
        node[key] = _Array$from(node[key]);

      // Recurse into child node
      recurse(node[key], path + '.');
    });
  };

  if (isObject(tree))
    // Recurse object tree
    recurse(tree,
    // If a tree path was provided, append a dot
    treePath === '' ? treePath : treePath + '.');

  return files;
}

/**
 * A React Native FormData file object.
 * @see {@link https://github.com/facebook/react-native/blob/v0.45.1/Libraries/Network/FormData.js#L34}
 * @typedef {Object} ReactNativeFileObject
 * @property {String} uri - File system path.
 * @property {String} [type] - File content type.
 * @property {String} [name] - File name.
 */

/**
 * A React Native file.
 */
var ReactNativeFile =
/**
 * Constructs a new file.
 * @param {ReactNativeFileObject} file
 * @example
 * const file = new ReactNativeFile({
 *  uri: uriFromCameraRoll,
 *  type: 'image/jpeg',
 *  name: 'photo.jpg'
 * })
 */
function ReactNativeFile(_ref) {
  var uri = _ref.uri,
      type = _ref.type,
      name = _ref.name;

  _classCallCheck(this, ReactNativeFile);

  this.uri = uri;
  this.type = type;
  this.name = name;
};

ReactNativeFile.list = function (files) {
  return files.map(function (file) {
    return new ReactNativeFile(file);
  });
};

export { isObject, extractFiles, ReactNativeFile };
//# sourceMappingURL=extract-files.module.js.map



//////////////////
// WEBPACK FOOTER
// ./node_modules/extract-files/dist/extract-files.module.js
// module id = 905
// module chunks = 93