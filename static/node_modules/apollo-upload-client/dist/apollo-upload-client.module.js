import { ReactNativeFile, extractFiles as extractFiles$1 } from 'extract-files';
import _extends from 'babel-runtime/helpers/extends';
import _JSON$stringify from 'babel-runtime/core-js/json/stringify';
import _classCallCheck from 'babel-runtime/helpers/classCallCheck';
import _possibleConstructorReturn from 'babel-runtime/helpers/possibleConstructorReturn';
import _inherits from 'babel-runtime/helpers/inherits';
import { HTTPBatchedNetworkInterface, HTTPFetchNetworkInterface, printAST } from 'apollo-client';
import _objectWithoutProperties from 'babel-runtime/helpers/objectWithoutProperties';

var UploadHTTPFetchNetworkInterface = function (_HTTPFetchNetworkInte) {
  _inherits(UploadHTTPFetchNetworkInterface, _HTTPFetchNetworkInte);

  function UploadHTTPFetchNetworkInterface() {
    _classCallCheck(this, UploadHTTPFetchNetworkInterface);

    return _possibleConstructorReturn(this, _HTTPFetchNetworkInte.apply(this, arguments));
  }

  UploadHTTPFetchNetworkInterface.prototype.fetchFromRemoteEndpoint = function fetchFromRemoteEndpoint(_ref) {
    var request = _ref.request,
        options = _ref.options;

    // Continue if uploads are possible
    if (typeof FormData !== 'undefined') {
      // Extract any files from the request variables
      var files = extractFiles$1(request.variables, 'variables');

      // Continue if there are files to upload
      if (files.length) {
        // Convert query AST to string for transport
        request.query = printAST(request.query);

        // Construct a multipart form
        var formData = new FormData();
        formData.append('operations', _JSON$stringify(request));
        files.forEach(function (_ref2) {
          var path = _ref2.path,
              file = _ref2.file;
          return formData.append(path, file);
        });

        // Send request
        return fetch(this._uri, _extends({
          method: 'POST',
          body: formData
        }, options));
      }
    }

    // Standard fetch method fallback
    return _HTTPFetchNetworkInte.prototype.fetchFromRemoteEndpoint.call(this, { request: request, options: options });
  };

  return UploadHTTPFetchNetworkInterface;
}(HTTPFetchNetworkInterface);

function createNetworkInterface(_ref3) {
  var uri = _ref3.uri,
      _ref3$opts = _ref3.opts,
      opts = _ref3$opts === undefined ? {} : _ref3$opts;

  return new UploadHTTPFetchNetworkInterface(uri, opts);
}

var UploadHTTPBatchedNetworkInterface = function (_HTTPBatchedNetworkIn) {
  _inherits(UploadHTTPBatchedNetworkInterface, _HTTPBatchedNetworkIn);

  function UploadHTTPBatchedNetworkInterface() {
    _classCallCheck(this, UploadHTTPBatchedNetworkInterface);

    return _possibleConstructorReturn(this, _HTTPBatchedNetworkIn.apply(this, arguments));
  }

  UploadHTTPBatchedNetworkInterface.prototype.batchedFetchFromRemoteEndpoint = function batchedFetchFromRemoteEndpoint(_ref) {
    var requests = _ref.requests,
        options = _ref.options;

    // Continue if uploads are possible
    if (typeof FormData !== 'undefined') {
      // Extract any files from the each request variables
      var files = requests.reduce(function (files, request, index) {
        return files.concat(extractFiles$1(request.variables, index + '.variables'));
      }, []);

      // Continue if there are files to upload
      if (files.length) {
        // For each request convert query AST to string for transport
        requests.forEach(function (request) {
          request.query = printAST(request.query);
        });

        // Construct a multipart form
        var formData = new FormData();
        formData.append('operations', _JSON$stringify(requests));
        files.forEach(function (_ref2) {
          var path = _ref2.path,
              file = _ref2.file;
          return formData.append(path, file);
        });

        // Send request
        return fetch(this._uri, _extends({
          method: 'POST',
          body: formData
        }, options));
      }
    }

    // Standard fetch method fallback
    return _HTTPBatchedNetworkIn.prototype.batchedFetchFromRemoteEndpoint.call(this, { requests: requests, options: options });
  };

  return UploadHTTPBatchedNetworkInterface;
}(HTTPBatchedNetworkInterface);

var createBatchingNetworkInterface = function createBatchingNetworkInterface(_ref3) {
  var _ref3$opts = _ref3.opts,
      fetchOpts = _ref3$opts === undefined ? {} : _ref3$opts,
      options = _objectWithoutProperties(_ref3, ['opts']);

  return new UploadHTTPBatchedNetworkInterface(_extends({ fetchOpts: fetchOpts }, options));
};

export { ReactNativeFile, UploadHTTPFetchNetworkInterface, createNetworkInterface, UploadHTTPBatchedNetworkInterface, createBatchingNetworkInterface };
//# sourceMappingURL=apollo-upload-client.module.js.map



//////////////////
// WEBPACK FOOTER
// ./node_modules/apollo-upload-client/dist/apollo-upload-client.module.js
// module id = 904
// module chunks = 93