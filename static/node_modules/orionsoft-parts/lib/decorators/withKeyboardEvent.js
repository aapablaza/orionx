'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _extends2 = require('babel-runtime/helpers/extends');

var _extends3 = _interopRequireDefault(_extends2);

var _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _createClass2 = require('babel-runtime/helpers/createClass');

var _createClass3 = _interopRequireDefault(_createClass2);

var _possibleConstructorReturn2 = require('babel-runtime/helpers/possibleConstructorReturn');

var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);

var _inherits2 = require('babel-runtime/helpers/inherits');

var _inherits3 = _interopRequireDefault(_inherits2);

exports.default = function (keys, functionName) {
  keys = (0, _isArray2.default)(keys) ? keys : [keys];
  return function (Child) {
    var _desc, _value, _class;

    return _class = function (_React$Component) {
      (0, _inherits3.default)(KeyboardEvent, _React$Component);

      function KeyboardEvent(props) {
        (0, _classCallCheck3.default)(this, KeyboardEvent);

        var _this = (0, _possibleConstructorReturn3.default)(this, (KeyboardEvent.__proto__ || Object.getPrototypeOf(KeyboardEvent)).call(this, props));

        _this.pressedKeys = [];
        _this.cleanKeys = (0, _debounce2.default)(_this.cleanKeys, 1000);
        return _this;
      }

      (0, _createClass3.default)(KeyboardEvent, [{
        key: 'cleanKeys',
        value: function cleanKeys() {
          this.pressedKeys = [];
        }
      }, {
        key: 'cancelKeyPress',
        value: function cancelKeyPress(keyCode) {
          if (keyCode === 13) {
            var activeElement = document.activeElement;
            if (!activeElement) return;
            var tag = activeElement.tagName;
            if (tag === 'TEXTAREA') return true;
          }
        }
      }, {
        key: 'onKeyDown',
        value: function onKeyDown(event) {
          var keyCode = event.keyCode;
          if (this.cancelKeyPress(keyCode)) return;
          var oldPressedKeys = (0, _clone2.default)(this.pressedKeys);
          this.pressedKeys = (0, _union2.default)(this.pressedKeys, [keyCode]);
          if ((0, _isEqual2.default)(this.pressedKeys, oldPressedKeys)) return;
          this.checkKeys(event);
          this.cleanKeys();
        }
      }, {
        key: 'onKeyUp',
        value: function onKeyUp(event) {
          var keyCode = event.keyCode;
          if (this.cancelKeyPress(keyCode)) return;
          var oldPressedKeys = (0, _clone2.default)(this.pressedKeys);
          this.pressedKeys = (0, _without2.default)(this.pressedKeys, keyCode);
          if ((0, _isEqual2.default)(this.pressedKeys, oldPressedKeys)) return;
          this.checkKeys(event);
          this.cleanKeys();
        }
      }, {
        key: 'getCombinationKeyCodes',
        value: function getCombinationKeyCodes(combination) {
          var parts = combination.split('+');
          return parts.map(function (key) {
            return _keyCodes2.default[key];
          });
        }
      }, {
        key: 'getChild',
        value: function getChild(from) {
          from = from || this;
          if (!from.refs.keyboardEventChild) return from;
          return this.getChild(from.refs.keyboardEventChild);
        }
      }, {
        key: 'checkKeys',
        value: function checkKeys(event) {
          var _iteratorNormalCompletion = true;
          var _didIteratorError = false;
          var _iteratorError = undefined;

          try {
            for (var _iterator = keys[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
              var combination = _step.value;

              var codes = this.getCombinationKeyCodes(combination);
              if ((0, _isEqual2.default)(codes, this.pressedKeys)) {
                this.getChild()[functionName](event);
                // return event.preventDefault()
              }
            }
          } catch (err) {
            _didIteratorError = true;
            _iteratorError = err;
          } finally {
            try {
              if (!_iteratorNormalCompletion && _iterator.return) {
                _iterator.return();
              }
            } finally {
              if (_didIteratorError) {
                throw _iteratorError;
              }
            }
          }
        }
      }, {
        key: 'componentDidMount',
        value: function componentDidMount() {
          document.addEventListener('keydown', this.onKeyDown);
          document.addEventListener('keyup', this.onKeyUp);
        }
      }, {
        key: 'componentWillUnmount',
        value: function componentWillUnmount() {
          document.removeEventListener('keydown', this.onKeyDown);
          document.addEventListener('keyup', this.onKeyUp);
        }
      }, {
        key: 'render',
        value: function render() {
          return _react2.default.createElement(Child, (0, _extends3.default)({ ref: 'keyboardEventChild' }, this.props));
        }
      }]);
      return KeyboardEvent;
    }(_react2.default.Component), (_applyDecoratedDescriptor(_class.prototype, 'cleanKeys', [_autobindDecorator2.default], Object.getOwnPropertyDescriptor(_class.prototype, 'cleanKeys'), _class.prototype), _applyDecoratedDescriptor(_class.prototype, 'onKeyDown', [_autobindDecorator2.default], Object.getOwnPropertyDescriptor(_class.prototype, 'onKeyDown'), _class.prototype), _applyDecoratedDescriptor(_class.prototype, 'onKeyUp', [_autobindDecorator2.default], Object.getOwnPropertyDescriptor(_class.prototype, 'onKeyUp'), _class.prototype)), _class;
  };
};

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _isArray = require('lodash/isArray');

var _isArray2 = _interopRequireDefault(_isArray);

var _autobindDecorator = require('autobind-decorator');

var _autobindDecorator2 = _interopRequireDefault(_autobindDecorator);

var _without = require('lodash/without');

var _without2 = _interopRequireDefault(_without);

var _union = require('lodash/union');

var _union2 = _interopRequireDefault(_union);

var _clone = require('lodash/clone');

var _clone2 = _interopRequireDefault(_clone);

var _isEqual = require('lodash/isEqual');

var _isEqual2 = _interopRequireDefault(_isEqual);

var _debounce = require('lodash/debounce');

var _debounce2 = _interopRequireDefault(_debounce);

var _keyCodes = require('../helpers/keyCodes');

var _keyCodes2 = _interopRequireDefault(_keyCodes);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _applyDecoratedDescriptor(target, property, decorators, descriptor, context) {
  var desc = {};
  Object['ke' + 'ys'](descriptor).forEach(function (key) {
    desc[key] = descriptor[key];
  });
  desc.enumerable = !!desc.enumerable;
  desc.configurable = !!desc.configurable;

  if ('value' in desc || desc.initializer) {
    desc.writable = true;
  }

  desc = decorators.slice().reverse().reduce(function (desc, decorator) {
    return decorator(target, property, desc) || desc;
  }, desc);

  if (context && desc.initializer !== void 0) {
    desc.value = desc.initializer ? desc.initializer.call(context) : void 0;
    desc.initializer = undefined;
  }

  if (desc.initializer === void 0) {
    Object['define' + 'Property'](target, property, desc);
    desc = null;
  }

  return desc;
}


//////////////////
// WEBPACK FOOTER
// ./node_modules/orionsoft-parts/lib/decorators/withKeyboardEvent.js
// module id = 476
// module chunks = 93